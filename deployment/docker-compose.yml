version: '3.4'

volumes:
  static-data:
  media-data:
  database:
  rabbitmq:
  backups-data:

x-common-django:
  &default-common-django
  image: kartoza/healthsites_django:${VERSION:-latest}
  environment:
    - VERSION=${VERSION}
    - ADMIN_USERNAME=${ADMIN_USERNAME}
    - ADMIN_PASSWORD=${ADMIN_PASSWORD}
    - ADMIN_EMAIL=${ADMIN_EMAIL}
    - DEFAULT_FROM_EMAIL=${DEFAULT_FROM_EMAIL}
    - EMAIL_HOST_USER=${EMAIL_HOST_USER}

    # django database
    - DATABASE_NAME=${DATABASE_NAME}
    - DATABASE_HOST=${DATABASE_HOST}
    - DATABASE_USERNAME=${DATABASE_USERNAME}
    - DATABASE_PASSWORD=${DATABASE_PASSWORD}
    - DATABASE_PORT=${DATABASE_PORT}

    # docker osm database
    - DATABASE_OSM_NAME=${DATABASE_OSM_NAME}
    - DATABASE_OSM_HOST=${DATABASE_OSM_HOST}
    - DATABASE_OSM_USERNAME=${DATABASE_OSM_USERNAME}
    - DATABASE_OSM_PASSWORD=${DATABASE_OSM_PASSWORD}
    - DATABASE_OSM_PORT=${DATABASE_OSM_PORT}

    # hardcoded
    - RABBITMQ_HOST=rabbitmq
    - DJANGO_SETTINGS_MODULE=core.settings.prod
    - VIRTUAL_HOST=healthsites.io
    - VIRTUAL_PORT=8080

    # KEYS
    - CAPTCHA_SITE_KEY=${CAPTCHA_SITE_KEY}
    - CAPTCHA_SECRET_KEY=${CAPTCHA_SECRET_KEY}
    - GOOGLE_MAPS_API_KEY=${GOOGLE_MAPS_API_KEY}
    - SOCIAL_AUTH_OPENSTREETMAP_KEY=${SOCIAL_AUTH_OPENSTREETMAP_KEY}
    - SOCIAL_AUTH_OPENSTREETMAP_SECRET=${SOCIAL_AUTH_OPENSTREETMAP_SECRET}
    - TEST_USERS=${TEST_USERS}
  volumes:
    - static-data:/home/web/static
    - media-data:/home/web/media
  deploy:
    restart_policy:
      condition: on-failure
      delay: 5s
      max_attempts: 5
      window: 120s

services:
  # Vanilla RabbitMQ service. This is needed by celery
  rabbitmq:
    image: rabbitmq:3.7-alpine
    container_name: healthsites_rabbitmq
    volumes:
      - rabbitmq:/var/lib/rabbitmq
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 5
        window: 120s

  db:
    image: kartoza/postgis:13.0
    container_name: healthsites_db
    volumes:
      - database:/var/lib/postgresql/13
    environment:
      - ALLOW_IP_RANGE=0.0.0.0/0
      - POSTGRES_DBNAME=${DATABASE_NAME}
      - POSTGRES_USER=${DATABASE_USERNAME}
      - POSTGRES_PASS=${DATABASE_PASSWORD}
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 5
        window: 120s

  dbbackups:
    image: kartoza/pg-backup:13.0
    container_name: healthsites_dbbackups
    environment:
      # take care to let the project name below match that
      # declared in the top of the makefile
      - DUMPPREFIX=PG_healthsites
      # These are all defaults anyway, but setting explicitly in
      # case we ever want to ever use different credentials
      - PGDATABASE=${DATABASE_NAME}
      - PGHOST=${DATABASE_HOST}
      - PGUSER=${DATABASE_USERNAME}
      - PGPASSWORD=${DATABASE_PASSWORD}
      - PGPORT=5432
    volumes:
      - backups-data:/backups
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 5
        window: 120s

  django:
    <<: *default-common-django
    container_name: healthsites_django
    command: 'uwsgi --ini /uwsgi.conf'
    entrypoint: ["/home/web/django_project/entrypoint.sh"]

  # Celery worker that executes celery tasks created by Django.
  worker:
    <<: *default-common-django
    container_name: healthsites_worker
    command: celery -A core.celery:app worker -B -l debug
    entrypoint: []

  nginx:
    image: nginx
    container_name: "healthsites_nginx"
    volumes:
      - static-data:/home/web/static:ro
      - media-data:/home/web/media:ro
    ports:
      - "${HTTP_PORT}:8080"
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 5
        window: 120s
    profiles: ["dev"]