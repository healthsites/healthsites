# Generated by Django 3.2.6 on 2021-12-23 05:42

from django.conf import settings
import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion
import localities.models.data_loader


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='DataLoaderPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('accepted_csv', models.FileField(help_text='Accepted CSV data that contains the data.', upload_to='accepted_csv_data/', validators=[localities.models.data_loader.validate_file_extension], verbose_name='Accepted CSV Data')),
                ('uploader', models.ForeignKey(help_text='The user who propose the data loader.', limit_choices_to={'id__in': localities.models.data_loader.get_trusted_user}, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Uploader')),
            ],
        ),
        migrations.CreateModel(
            name='DataLoader',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('organisation_name', models.CharField(blank=True, default='', help_text="Organisation's Name", max_length=100, null=True, verbose_name="Organisation's Name")),
                ('csv_data', models.FileField(help_text='CSV data that contains the data.', upload_to='csv_data/%Y/%m/%d', verbose_name='CSV Data')),
                ('data_loader_mode', models.IntegerField(choices=[(1, 'Replace/Insert Data'), (2, 'Update Data')], default=1, help_text='The mode of the data loader.', verbose_name='Data Loader Mode')),
                ('json_concept_mapping', models.FileField(blank=True, help_text='JSON Concept Mapping File.', null=True, upload_to='json_mapping/%Y/%m/%d', verbose_name='JSON Concept Mapping')),
                ('applied', models.BooleanField(default=False, help_text='Whether the data update has been applied or not.', verbose_name='Applied')),
                ('date_time_uploaded', models.DateTimeField(help_text='Timestamp (UTC) when the data uploaded', verbose_name='Uploaded (time)')),
                ('date_time_applied', models.DateTimeField(help_text='When the data applied (loaded)', null=True, verbose_name='Applied (time)')),
                ('separator', models.IntegerField(choices=[(1, 'Comma'), (2, 'Tab')], default=1, help_text='Separator character.', verbose_name='Separator Character')),
                ('notes', models.TextField(blank=True, default='', help_text='Notes', null=True, verbose_name='Notes')),
                ('author', models.ForeignKey(help_text='The user who propose the data loader.', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Author')),
            ],
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='The name of the country.', max_length=50, verbose_name='')),
                ('code', models.CharField(blank=True, help_text='administrative code', max_length=32, null=True, unique=True)),
                ('polygon_geometry', django.contrib.gis.db.models.fields.MultiPolygonField(blank=True, null=True, srid=4326)),
                ('parent', models.ForeignKey(blank=True, help_text='is the administrative under other administrative (parent)', null=True, on_delete=django.db.models.deletion.SET_NULL, to='localities.country')),
            ],
            options={
                'verbose_name_plural': 'Countries',
            },
        ),
    ]
